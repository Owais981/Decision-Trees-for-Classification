# -*- coding: utf-8 -*-
"""Decision Trees for Classification

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1cpq93czbH-gEKD45zBaZNWIYWWnoFfTP

**Import Librarie**
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.model_selection import train_test_split, cross_val_score
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.tree import DecisionTreeClassifier, plot_tree
from sklearn.metrics import (
    accuracy_score, f1_score, confusion_matrix, classification_report
)

"""** Load Dataset**"""

df = pd.read_csv('/content/1) iris (2).csv')
print("Dataset Preview:")
print(df.head())
print("\nDataset Info:")
print(df.info())

"""**Clean Dataset**"""

print("\nMissing Values:")
print(df.isnull().sum())

# Remove missing rows
df.dropna(inplace=True)

"""**Encode Categorical Columns (Text â†’ Numbers)**"""

label_encoders = {}
for col in df.select_dtypes(include='object').columns:
    le = LabelEncoder()
    df[col] = le.fit_transform(df[col])
    label_encoders[col] = le

print("\nEncoded Dataset Preview:")
print(df.head())

"""**Feature and Target Selection**"""

X = df.iloc[:, :-1]   # All columns except the last
y = df.iloc[:, -1]    # Last column is the target

# Make sure it's binary
print("\nTarget Classes:", np.unique(y))
if len(np.unique(y)) > 2:
    y = np.where(y == np.unique(y)[0], 0, 1)
    print("Binary Target:", np.unique(y))

"""**Scale Features**"""

scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

"""**Split into Train and Test**"""

X_train, X_test, y_train, y_test = train_test_split(
    X_scaled, y, test_size=0.2, random_state=42
)

"""**Train Decision Tree (with pruning: max_depth=3)**"""

tree = DecisionTreeClassifier(max_depth=3, random_state=42)
tree.fit(X_train, y_train)

"""**Predict**"""

y_pred = tree.predict(X_test)

"""**Evaluate Performanc**"""

print("Accuracy:", accuracy_score(y_test, y_pred))
print("F1 Score:", f1_score(y_test, y_pred))
print("\nConfusion Matrix:\n", confusion_matrix(y_test, y_pred))
print("\nClassification Report:\n", classification_report(y_test, y_pred))

"""** Visualize the Decision Tree**"""

plt.figure(figsize=(12, 8))
plot_tree(tree,
          filled=True,
          feature_names=df.columns[:-1],
          class_names=["Class 0", "Class 1"])
plt.title("Decision Tree Visualization (Depth=3)")
plt.show()

"""** Cross-Validation**


"""

cv_scores = cross_val_score(tree, X_scaled, y, cv=5)
print("\nCross-validation scores:", cv_scores)
print("Average CV accuracy:", np.mean(cv_scores))